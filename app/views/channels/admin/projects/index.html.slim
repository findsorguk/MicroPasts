.admin
  .row
    = render 'layouts/admin/menu'
    section.content.large-12.columns
      h1
        = @title = t('channels.admin.management.title')
        ' :
        = @total_projects
        '
        = t('channels.admin.management.total')

      = simple_form_for '', url: channels_admin_projects_path, method: :get do |form|
        .row
          .large-3.columns
            = form.input :by_id, as: :integer, label: t('channels.admin.filter.by_id')
          .large-3.columns
            = form.input 'between_created_at[start_at]', as: :string, label: t('channels.admin.filter.between_created_at'), input_html: { data: { mask: '99/99/9999' } }
          .large-3.columns
            br/
            = form.input 'between_created_at[ends_at]', as: :string, label: false, input_html: { class: 'custom', data: { mask: '99/99/9999' } }
          .large-3.columns
            = form.input :with_state, collection: Project.state_names, label: t('channels.admin.filter.with_state'), as: :select, selected: params[:with_state], include_blank: true
        .row
          .large-4.columns
            = form.input :pg_search, as: :string, label: t('channels.admin.filter.pg_search')
          .large-4.columns
            = form.input :user_name_contains, as: :string, label: t('channels.admin.filter.user_name_contains')
          .large-4.columns
            = form.input :order_by, label: t('channels.admin.filter.order_table'), as: :select, collection: [[t('.order_created_at'), 'created_at desc'], [t('.order_asc'), 'goal asc'], [t('.order_desc'), 'goal desc']], selected: params[:order_by]
        .row
          .large-12.columns.text-right
            = form.button :submit, t('channels.admin.filter.submit'), class: 'button medium negative'

      .row
        .large-6.columns.text-left
            = paginate @projects
        .large-6.columns.text-right
          = pluralize_without_number @projects.count, t('words.found_singular'), t('words.found_plural')
          | &nbsp;
          strong = @projects.count
          | &nbsp;
          = pluralize_without_number(@projects.count, t('words.project_singular'), t('words.project_plural')).downcase
      - if @projects.empty?
        = t('.no_contributions')
      - else
        table
          thead
            tr
              th= t('channels.admin.table.name')
              th= t('channels.admin.table.category')
              th= t('channels.admin.table.user_id')
              th= t('channels.admin.table.goal')
              th= t('channels.admin.table.pledged')
              th= t('channels.admin.table.total_contributions')
              th= t('channels.admin.table.recommended')
              th= t('channels.admin.table.online_date')
              th= t('channels.admin.table.expires_at')
              th= t('channels.admin.table.state')
              th
          tbody
            - @projects.includes(:category).each do |project|
              tr id=project.id
                td= link_to project.name, project_path(project)
                td= project.category
                td= best_in_place [:channels, :admin, project], :user_id, method: :put, type: :input
                td= best_in_place [:channels, :admin, project], :goal, method: :put, type: :input, display_as: :display_goal
                td= "#{project.display_pledged} (#{project.progress}%)"
                td= project.total_contributions
                td= best_in_place [:channels, :admin, project], :recommended, method: :put, type: :checkbox, collection: [t('words._no'), t('words._yes')]
                td= project.online_date.to_date if project.online_date
                td= project.display_expires_at
                td
                  - if project.online?
                    span.label.label-online= project.state
                  - elsif project.successful?
                    span.label.label-success= project.state
                  - elsif project.failed? or project.rejected?
                    span.label.label-important= project.state
                  - elsif project.waiting_funds?
                    span.label.label-warning= project.state
                  - else
                    span.label= project.state
                td.project-events-dropdown
                  = link_to 'javascript:void(0);', class: 'button tiny secondary', data: {dropdown: "dropdown-#{project.id}"} do
                    i.icon-et-down-dir
                  ul[id="dropdown-#{project.id}" data-dropdown-content class="f-dropdown"]
                    - if project.can_approve?
                      li
                        = link_to approve_channels_admin_project_path(project), method: :put do
                          i.icon-ok
                          = t('channels.admin.table.approve')

                    - if project.can_reject?
                      li
                        = link_to reject_channels_admin_project_path(project), method: :put  do
                          i.icon-ban-circle
                          = t('channels.admin.table.reject')

                    - if project.can_push_to_draft?
                      li
                        = link_to  push_to_draft_channels_admin_project_path(project), method: :put  do
                          i.icon-trash
                          = t('channels.admin.table.send_to_draft')

      = paginate @projects
